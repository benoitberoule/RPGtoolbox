/*This class represent a warhammer character*/package warhammerCharacter;import java.io.Serializable;import java.util.ArrayList;import java.util.Hashtable;import java.util.Iterator;import javax.swing.table.DefaultTableModel;import toolBox.Character;import toolBox.WarhammerCharacterCreationModule;public class WarhammerCharacter extends Character implements Serializable{	/*attributes*/	private static final long serialVersionUID = 4226960213258213787L;	/*basic attributes*/	protected String name;	protected int age;	protected char sex;	protected String eyesColor;	protected String hairColor;	protected int heigth; //cm	protected int weigth; //kg	protected String astralSign;	protected int brotherAndSisterAmount;	protected String nativeLand;	protected String distinctSign;	/*profil*/	protected Profil basicProfil;	protected Profil currentProfil;	/*career*/	protected Career currentCareer;	protected ArrayList<Career> formerCareers = new ArrayList<Career>();	/*skills & talents*/	protected ArrayList<SkillLearned> skills = new ArrayList<SkillLearned>();	protected ArrayList<Talent> talents = new ArrayList<Talent>();	/*race*/	protected Race race;	/*determine if the character is a "Non Player Characer" (npc) or not*/	protected boolean npc = false;		protected static WarhammerCharacterCreationModule module;		/*methods*/	public WarhammerCharacter(WarhammerCharacterCreationModule _module)	{		module = _module;		relatedRPG =module.getRelatedRPG();			}		public WarhammerCharacter()	{			}			/*modification of the basic profil (which implied modification of the current profil)*/	public void modifyBasicProfil(String car , int mod)	{		basicProfil.set(car, basicProfil.get(car) + mod);		currentProfil.set(car, currentProfil.get(car) + mod);	}		@Override	public void getGUIInputs(Hashtable<String, Object> ht) {		name = new String(ht.get("name").toString());		race = new Race(ht.get("race").toString());		if(!ht.get("age").toString().equals(""))		{age = Integer.parseInt(ht.get("age").toString());}		sex = ht.get("sex").toString().charAt(0);		eyesColor = ht.get("eyesColor").toString();		hairColor = ht.get("hairColor").toString();		if(!ht.get("weigth").toString().equals(""))		{weigth = Integer.parseInt(ht.get("weigth").toString());}		if(!ht.get("heigth").toString().equals(""))		{heigth = Integer.parseInt(ht.get("heigth").toString());}		if(!ht.get("brotherAndSisterAmount").toString().equals(""))		{brotherAndSisterAmount = Integer.parseInt(ht.get("brotherAndSisterAmount").toString());}		nativeLand = ht.get("nativeLand").toString();		astralSign = ht.get("astralSign").toString();		distinctSign = ht.get("distinctSign").toString();		npc = (boolean) ht.get("npc");						/*Career*/		boolean careerFound = false;		@SuppressWarnings("rawtypes")		Iterator it = module.getCareerList().keySet().iterator();		Object key;		while(!careerFound && it.hasNext())		{ key = it.next();			if(module.getCareerList().get(key).getName().equals(ht.get("currentCareer").toString()))			{				currentCareer = module.getCareerList().get(key);				careerFound = true;			}		}		if(careerFound == false)		{			System.out.println("Erreur lors de la recherche de la carierre " + ht.get("currentCareer").toString());			currentCareer = new Career(ht.get("currentCareer").toString());		}				/*Former career*/				formerCareers = new ArrayList<Career>();		for(int i = 0 ; i < ((DefaultTableModel)ht.get("formerCareers")).getRowCount() ; ++i)		{			 it = module.getCareerList().keySet().iterator();			 careerFound = false;			while(!careerFound && it.hasNext())			{				key = it.next();				System.out.println(((DefaultTableModel)ht.get("formerCareers")).getValueAt(i, 0));				if(module.getCareerList().get(key).getName().equals( ((DefaultTableModel)ht.get("formerCareers")).getValueAt(i, 0) ))				{					formerCareers.add( module.getCareerList().get(key) );					it.next();					careerFound = true;				}			}						if(careerFound == false)			{				System.out.println("Erreur lors de la recherche des anciennes carierres : "+ ((DefaultTableModel)ht.get("formerCareers")).getValueAt(i, 0));				formerCareers.add(new Career(((DefaultTableModel)ht.get("formerCareers")).getValueAt(i, 0).toString()));			}					}		/*Basic profil*/		DefaultTableModel pro = ((DefaultTableModel)ht.get("basicProfil"));		basicProfil = new Profil(Integer.parseInt( (String) pro.getValueAt(0, 0)),				Integer.parseInt( (String) pro.getValueAt(0, 1)),				Integer.parseInt( (String) pro.getValueAt(0, 2)),				Integer.parseInt( (String) pro.getValueAt(0, 3)),				Integer.parseInt( (String) pro.getValueAt(0, 4)),				Integer.parseInt( (String) pro.getValueAt(0, 5)),				Integer.parseInt( (String) pro.getValueAt(0, 6)),				Integer.parseInt( (String) pro.getValueAt(0, 7)),				Integer.parseInt( (String) pro.getValueAt(0, 8)),				Integer.parseInt( (String) pro.getValueAt(0, 9)),				Integer.parseInt( (String) pro.getValueAt(0, 10)),				Integer.parseInt( (String) pro.getValueAt(0, 11)),				Integer.parseInt( (String) pro.getValueAt(0, 12)),				Integer.parseInt( (String) pro.getValueAt(0, 13)),				Integer.parseInt( (String) pro.getValueAt(0, 14)),				Integer.parseInt( (String) pro.getValueAt(0, 15)));				/*Current profil*/		 pro = ((DefaultTableModel)ht.get("currentProfil"));		currentProfil = new Profil(Integer.parseInt( (String)pro.getValueAt(0, 0)),				Integer.parseInt( (String)pro.getValueAt(0, 1)),				Integer.parseInt( (String)pro.getValueAt(0, 2)),				Integer.parseInt( (String)pro.getValueAt(0, 3)),				Integer.parseInt( (String)pro.getValueAt(0, 4)),				Integer.parseInt( (String)pro.getValueAt(0, 5)),				Integer.parseInt( (String)pro.getValueAt(0, 6)),				Integer.parseInt( (String)pro.getValueAt(0, 7)),				Integer.parseInt( (String)pro.getValueAt(0, 8)),				Integer.parseInt( (String)pro.getValueAt(0, 9)),				Integer.parseInt( (String)pro.getValueAt(0, 10)),				Integer.parseInt( (String)pro.getValueAt(0, 11)),				Integer.parseInt( (String)pro.getValueAt(0, 12)),				Integer.parseInt( (String)pro.getValueAt(0, 13)),				Integer.parseInt( (String)pro.getValueAt(0, 14)),				Integer.parseInt( (String)pro.getValueAt(0, 15)));				/*Skills*/		skills = new ArrayList<SkillLearned>();		boolean skillFound = false;		for( int i = 0 ; i < ((DefaultTableModel)ht.get("skills")).getRowCount() ; ++i)		{			 it = module.getSkillList().keySet().iterator();			 skillFound = false;						while(!skillFound && it.hasNext())			{				key = it.next();				if(module.getSkillList().get(key).getName().equals( ((DefaultTableModel)ht.get("skills")).getValueAt(i, 0) ))				{					skills.add( new SkillLearned( module.getSkillList().get(key), 0 ));					skillFound = true;				}			}						if(skillFound == false)			{				System.out.println("Erreur lors de la recherche des compÃ©tences : " + ((DefaultTableModel)ht.get("skills")).getValueAt(i, 0));				skills.add(new SkillLearned(new Skill(((DefaultTableModel)ht.get("skills")).getValueAt(i, 0).toString(), ""))); 			}					}				/*talents*/		talents = new ArrayList<Talent>();		boolean talentFound = false;		for(int i = 0 ; i < ((DefaultTableModel)ht.get("talents")).getRowCount() ; ++i)		{			 it = module.getTalentList().keySet().iterator();			 talentFound = false;						while(!talentFound && it.hasNext())			{				key = it.next();				if(module.getTalentList().get(key).getName().equals( ((DefaultTableModel)ht.get("talents")).getValueAt(i, 0) ))				{					talents.add( module.getTalentList().get(key) );					talentFound = true;				}			}						if(talentFound == false)			{				System.out.println("Erreur lors de la recherche des talents :" +  ((DefaultTableModel)ht.get("talents")).getValueAt(i, 0) );				talents.add( new Talent( ((DefaultTableModel)ht.get("talents")).getValueAt(i, 0).toString()) ); 			}					}						//displayInformation();	}		public String toString()	{		String str = "";		str += "<html>";		str += ("name : " + name);		str += "<br>";		str += ("race : " + race);		str += "<br>";		str += ("age : " + age);		str += "<br>";		str += ("sex : " + sex);		str += "<br>";		str += ("eyesColor : " + eyesColor);		str += "<br>";		str += ("hairColor : " + hairColor);		str += "<br>";		str += ("weigth : " + weigth);		str += "<br>";		str += ("heigth : " + heigth);		str += "<br>";		str += ("brother and sister : " + brotherAndSisterAmount);		str += "<br>";		str += ("nativeLand : " + nativeLand);		str += "<br>";		str += ("astralSign : " + distinctSign);		str += "<br>";		str += ("disctinctSign : " + distinctSign);		str += "<br>";		if(currentCareer != null)		{			str += ("CurrentCareer : " + currentCareer.getName());		}		str += "<br>";		str += ("FormerCareers : ");		str += "<br>";		for (int i = 0 ; i < formerCareers.size() ; ++i)		{			str += ("   " +formerCareers.get(i).getName());			str += "<br>";		}		if(formerCareers.size() == 0)		{			str += ("   NONE");			str += "<br>";		}		str += ("basic profil : ");		str += "<br>";		str += ("   " + basicProfil.getCaracTable());		str += "<br>";		str += ("curentProfil : ");		str += "<br>";		str += ("   " + currentProfil.getCaracTable());		str += "<br>";		str += ("Skills : ");		str += "<br>";		for (int i = 0 ; i < skills.size() ; ++i)		{			str += ("   "+ skills.get(i).skill.getName());			str += "<br>";		}		if(skills.size() == 0)		{			str += ("   NONE");			str += "<br>";		}				str += ("Talents : ");		str += "<br>";		for(int i = 0 ; i < talents.size() ; ++i)		{			str += ("   " + talents.get(i).getName());			str += "<br>";		}		if(talents.size() == 0)		{			str += ("   NONE");			str += "<br>";		}		str +=("Categories:");		str += "<br>";		if(categories.size() == 0)		{			str += "NONE";			str += "<br>";		}		for(int i = 0 ; i < categories.size() ; ++i)		{			str += categories.get(i);			str += "<br>";		}		str += "<html>";		return str;	}	/*Print the characteristics of the character (only use to debug)*/	public void displayInformation()	{		System.out.println("name : " + name);		System.out.println("race : " + race);		System.out.println("age : " + age);		System.out.println("sex : " + sex);		System.out.println("eyesColor : " + eyesColor);		System.out.println("hairColor : " + hairColor);		System.out.println("weigth : " + weigth);		System.out.println("heigth : " + heigth);		System.out.println("brother and sister : " + brotherAndSisterAmount);		System.out.println("nativeLand : " + nativeLand);		System.out.println("astralSign : " + distinctSign);		System.out.println("disctinctSign : " + distinctSign);		if(currentCareer != null)		{System.out.println("CurrentCareer : " + currentCareer.getName());}		System.out.println("FormerCareers : ");		for (int i = 0 ; i < formerCareers.size() ; ++i)		{			System.out.println("   " +formerCareers.get(i).getName());		}		if(formerCareers.size() == 0)		{			System.out.println("   NONE");		}		System.out.println("basic profil : ");		System.out.println("   " + basicProfil.getCaracTable());		System.out.println("curentProfil : ");		System.out.println("   " + currentProfil.getCaracTable());		System.out.println("Skills : ");		for (int i = 0 ; i < skills.size() ; ++i)		{			System.out.println("   "+ skills.get(i).skill.getName());		}		if(skills.size() == 0)		{			System.out.println("   NONE");		}		System.out.println("Talents : ");		for(int i = 0 ; i < talents.size() ; ++i)		{			System.out.println("   " + talents.get(i).getName());		}		if(talents.size() == 0)		{			System.out.println("   NONE");		}			}				/*setter & getter*/	public String getName() {		return name;	}	public void setName(String name) {		this.name = name;	}	public int getAge() {		return age;	}	public void setAge(int age) {		this.age = age;	}	public char getSex() {		return sex;	}	public void setSex(char sex) {		this.sex = sex;	}	public String getEyesColor() {		return eyesColor;	}	public void setEyesColor(String eyesColor) {		this.eyesColor = eyesColor;	}	public String getHairColor() {		return hairColor;	}	public void setHairColor(String hairColor) {		this.hairColor = hairColor;	}	public int getHeigth() {		return heigth;	}	public void setHeigth(int heigth) {		this.heigth = heigth;	}	public int getWeigth() {		return weigth;	}	public void setWeigth(int weigth) {		this.weigth = weigth;	}	public String getAstralSign() {		return astralSign;	}	public void setAstralSign(String astralSign) {		this.astralSign = astralSign;	}	public int getBrotherAndSisterAmount() {		return brotherAndSisterAmount;	}	public void setBrotherAndSisterAmount(int brotherAndSisterAmount) {		this.brotherAndSisterAmount = brotherAndSisterAmount;	}	public String getNativeLand() {		return nativeLand;	}	public void setNativeLand(String nativeLand) {		this.nativeLand = nativeLand;	}	public String getDistinctSign() {		return distinctSign;	}	public void setDistinctSign(String distinctSign) {		this.distinctSign = distinctSign;	}	public Profil getBasicProfil() {		return basicProfil;	}	public void setBasicProfil(Profil basicProfil) {		this.basicProfil = basicProfil;	}	public Profil getCurrentProfil() {		return currentProfil;	}	public void setCurrentProfil(Profil currentProfil) {		this.currentProfil = currentProfil;	}	public Career getCurrentCareer() {		return currentCareer;	}	public void setCurrentCareer(Career currentCareer) {		this.currentCareer = currentCareer;	}	public ArrayList<Career> getFormercareer() {		return formerCareers;	}	public void addFormerCareer(Career career){		formerCareers.add(career);	}	public ArrayList<SkillLearned> getSkills() {		return skills;	}	public void addSkill(Skill skill){		skills.add(new SkillLearned(skill));	}	public Race getRace() {		return race;	}	public void setRace(Race race) {		this.race = race;	}	public ArrayList<Career> getFormerCareers() {		return formerCareers;	}	public void setFormerCareers(ArrayList<Career> formerCareers) {		this.formerCareers = formerCareers;	}	public ArrayList<Talent> getTalents() {		return talents;	}	public void setTalents(ArrayList<Talent> talents) {		this.talents = talents;	}	public boolean isNpc() {		return npc;	}	public void setNpc(boolean npc) {		this.npc = npc;	}	public WarhammerCharacterCreationModule getModule() {		return module;	}	public void setModule(WarhammerCharacterCreationModule module) {		WarhammerCharacter.module = module;		relatedRPG = module.getRelatedRPG();	}	public void setSkills(ArrayList<SkillLearned> skills) {		this.skills = skills;	}		/**	 * @param attribut which will be set	 * @param str	 */	public void setAttribute(String attribut, String str)	{		attribut = attribut.toLowerCase();		if(attribut.equals("name")){			setName(str);		}else if (attribut.equals("eyecolor")){			setEyesColor(str);		}else if (attribut.equals("haircolor")){			setHairColor(str);		}else if(attribut.equals("astralsign")){			setAstralSign(str);		}else if(attribut.equals("nativeland")){			setNativeLand(str);		}else if(attribut.equals("distinctsign")){			setDistinctSign(str);		}else if(attribut.equals("race")){			setRace(new Race(str));		}else if(attribut.equals("careercurrent")){			setCurrentCareer(new Career(str));		}else //the attribut may be and int or char....		{			setAttribute(attribut, Integer.parseInt(str));			setAttribute(attribut,String.valueOf( str.charAt(0)));		}	}		public void setAttribute(String attribut, int val)	{		attribut = attribut.toLowerCase();		if(attribut.equals("age")){			setAge(val);		}else if (attribut.equals("height")){			setHeigth(val);		}else if(attribut.equals("weight")){			setWeigth(val);		}else if(attribut.equals("brotherandsisteramount")){			setBrotherAndSisterAmount(val);		}else if(attribut.equals("basic_cc")){			basicProfil.set("CC", val);		}else if(attribut.equals("basic_ct")){			basicProfil.set("CT", val);		}else if(attribut.equals("basic_e")){			basicProfil.set("F", val);		}else if(attribut.equals("basic_e")){			basicProfil.set("E", val);		}else if(attribut.equals("basic_ag")){			basicProfil.set("Ag", val);		}else if(attribut.equals("basic_int")){			basicProfil.set("Int", val);		}else if(attribut.equals("basic_fm")){			basicProfil.set("FM", val);		}else if(attribut.equals("basic_soc")){			basicProfil.set("Soc", val);		}else if(attribut.equals("basic_a")){			basicProfil.set("A", val);		}else if(attribut.equals("basic_b")){			basicProfil.set("B", val);		}else if(attribut.equals("basic_bf")){			basicProfil.set("BF", val);		}else if(attribut.equals("basic_be")){			basicProfil.set("BE", val);		}else if(attribut.equals("basic_m")){			basicProfil.set("M", val);		}else if(attribut.equals("basic_mag")){			basicProfil.set("Mag", val);		}else if(attribut.equals("basic_pf")){			basicProfil.set("PF", val);		}else if(attribut.equals("basic_pd")){			basicProfil.set("PD", val);		}else if(attribut.equals("current_cc")){			currentProfil.set("CC", val);		}else if(attribut.equals("current_ct")){			currentProfil.set("CT", val);		}else if(attribut.equals("current_e")){			currentProfil.set("F", val);		}else if(attribut.equals("current_e")){			currentProfil.set("E", val);		}else if(attribut.equals("current_ag")){			currentProfil.set("Ag", val);		}else if(attribut.equals("current_int")){			currentProfil.set("Int", val);		}else if(attribut.equals("current_fm")){			currentProfil.set("FM", val);		}else if(attribut.equals("current_soc")){			currentProfil.set("Soc", val);		}else if(attribut.equals("current_a")){			currentProfil.set("A", val);		}else if(attribut.equals("current_b")){			currentProfil.set("B", val);		}else if(attribut.equals("current_bf")){			currentProfil.set("BF", val);		}else if(attribut.equals("current_be")){			currentProfil.set("BE", val);		}else if(attribut.equals("current_m")){			currentProfil.set("M", val);		}else if(attribut.equals("current_mag")){			currentProfil.set("Mag", val);		}else if(attribut.equals("current_pf")){			currentProfil.set("PF", val);		}else if(attribut.equals("current_pd")){			currentProfil.set("PD", val);		}	}			public void setAttribute(String attribut, char val)	{		attribut = attribut.toLowerCase();		if(attribut.equals("sex")){			setSex(val);		}	}		/*This inner class allows the creation of singletons (skill,bonus)*/	class SkillLearned implements Serializable	{		private static final long serialVersionUID = 2927400593266095487L;		/*attributes*/		public Skill skill;		public int bonus; // 0/+10%/+20%				/*methods*/		public SkillLearned(Skill _skill, int _bonus) {			skill = _skill;			bonus = _bonus;		}				public SkillLearned(Skill _skill)		{			skill = _skill;			bonus = 0;		}				public void increaseBonus()		{			bonus += 10;		}				public void decreaseBonus()		{			bonus -= 10;		}				public int getBonus()		{			return bonus;		}				public void setBonus(int _bonus)		{			bonus = _bonus;		}			}	public static long getSerialversionuid() {		return serialVersionUID;	}	}